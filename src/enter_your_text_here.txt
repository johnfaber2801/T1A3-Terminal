Why Python?

Python is just one programming language of many. Just like human languages, there are many different
computer languages, such as Java, LISP, PHP, and Perl and...let's not forget C or others, as well as
useful things like UNIX scripting. Most languages are good at least one thing – for example, writing
easily portable programs is a strong-point for Java and accessing databases and splicing them into webpages
is the specialism for PHP. But underneath, all these languages are very similar at the core
concept level – most have data in variables and functions (procedures, methods) to do stuff to that data.

Some languages even combine data and functions into bundles called objects, and others like LISP let
you treat functions like variables, and vice versa. Python is a powerful, elegant programming language
that is easy to read and to understand. It demonstrates most of these features common to lots of other
languages and is useful for real-world applications, to boot! It's also free software, has one standard
implementation, and a large and friendly community of hackers around it. Once you learn Python, every
other language you want to learn should seem pretty familiar.

General Programming Language Concepts:

Programming languages consist of code, that is a bunch of sentences written for the computer that tell it
what to do. Code's not magic – in fact, it looks like some bizarre bastard child of English and logic
often enough. However, unlike natural languages such as English or Chinese, formal languages like
Python strive to eliminate ambiguity. They have to eliminate ambiguity, because your code is supposed
to tell the computer exactly what to do. You don't want your computer making any off-the-cuff
decisions for you, do you? Like any foreign language, once you read code enough, any piece of code
you find will start making sense, and if it doesn't, with a little bit of Internet research and a good
reference book or two, the code will make sense. Still, the computer does not directly read your code.

It has to have it translated into something even more indecipherable to mere mortals - machine code of
zeros and ones, register commands, and so on. To do this you need an interpreter, a program that lets
you type in and run code (or, a program that makes programs!). Interpreters let you type and run code
immediately. Compilers let you turn your code directly into machine code to run later.



Bibliography:

Python, W. (2021). Python. Python Releases for Windows, 24.